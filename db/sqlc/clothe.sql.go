// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: clothe.sql

package db

import (
	"context"
	"database/sql"
)

const createClothe = `-- name: CreateClothe :execresult
INSERT INTO clothes (
  name, amount, cost, price
) VALUES (
  ?, ?, ?, ?
)
`

type CreateClotheParams struct {
	Name   string `json:"name"`
	Amount int32  `json:"amount"`
	Cost   int32  `json:"cost"`
	Price  int32  `json:"price"`
}

func (q *Queries) CreateClothe(ctx context.Context, arg CreateClotheParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createClothe,
		arg.Name,
		arg.Amount,
		arg.Cost,
		arg.Price,
	)
}

const deleteClothe = `-- name: DeleteClothe :exec
DELETE FROM clothes
WHERE id = ?
`

func (q *Queries) DeleteClothe(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClothe, id)
	return err
}

const getClothe = `-- name: GetClothe :one
SELECT id, name, amount, cost, price, create_time FROM clothes
WHERE id = ? LIMIT 1
`

func (q *Queries) GetClothe(ctx context.Context, id int32) (Clothe, error) {
	row := q.db.QueryRowContext(ctx, getClothe, id)
	var i Clothe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Cost,
		&i.Price,
		&i.CreateTime,
	)
	return i, err
}

const listClothes = `-- name: ListClothes :many
SELECT id, name, amount, cost, price, create_time FROM clothes
ORDER BY name
`

func (q *Queries) ListClothes(ctx context.Context) ([]Clothe, error) {
	rows, err := q.db.QueryContext(ctx, listClothes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Clothe
	for rows.Next() {
		var i Clothe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.Cost,
			&i.Price,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClotheAmount = `-- name: UpdateClotheAmount :exec
UPDATE clothes
  SET amount = ?
WHERE id = ?
`

type UpdateClotheAmountParams struct {
	Amount int32 `json:"amount"`
	ID     int32 `json:"id"`
}

func (q *Queries) UpdateClotheAmount(ctx context.Context, arg UpdateClotheAmountParams) error {
	_, err := q.db.ExecContext(ctx, updateClotheAmount, arg.Amount, arg.ID)
	return err
}

const updateClothePrice = `-- name: UpdateClothePrice :exec
UPDATE clothes
  SET price = ?
WHERE id = ?
`

type UpdateClothePriceParams struct {
	Price int32 `json:"price"`
	ID    int32 `json:"id"`
}

func (q *Queries) UpdateClothePrice(ctx context.Context, arg UpdateClothePriceParams) error {
	_, err := q.db.ExecContext(ctx, updateClothePrice, arg.Price, arg.ID)
	return err
}
